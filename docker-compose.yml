version: '3.8'
 
services:
  influxdb:
    image: influxdb:latest
    volumes:
      - ./knowledge/data:/var/lib/influxdb2:rw
    ports:
      - "8086:8086"
    env_file:
      - .env
    entrypoint: ["./entrypoint.sh"]
 
  telegraf:
    image: telegraf:latest
    volumes:
      - ./telegraf.conf:/etc/telegraf/telegraf.conf:ro
    env_file:
      - .env
    depends_on:
      - influxdb
 
  mqtt:
    image: eclipse-mosquitto:latest
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"   
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
 
  monitor:
    build: ./monitor
    ports:
      - "5000:5000"
    volumes:
      - ./monitor:/app
      - ./rooms_config.json:/app/rooms_config.json
      - shared_data:/shared  # Volume condiviso con l'executor
    depends_on:
      - mqtt
    environment:
      - MQTT_BROKER=mqtt
      - MQTT_PORT=1883

  analysis:
    restart: always
    build: ./analysis
    volumes:
      - ./analysis:/app  
      - ./rooms_config.json:/app/rooms_config.json  
    depends_on:
      - influxdb

  planner:
    restart: always
    build: ./planner
    volumes:
      - ./planner:/app
      - ./rooms_config.json:/app/rooms_config.json 
      - ./wait-for-it.sh:/app/wait-for-it.sh
    depends_on:
      - analysis
      - influxdb
      - telegraf 
      - rabbitmq
    environment:
      - RABBITMQ_HOST=rabbitmq  # Usa il nome del servizio come host
  
  executor:
    restart: always
    build: ./executor
    volumes:
      - ./executor:/app
      - shared_data:/shared  # Volume condiviso con il monitor
      - ./wait-for-it.sh:/app/wait-for-it.sh
    depends_on:
      - planner
      - mqtt
      - rabbitmq
    environment:
      - RABBITMQ_HOST=rabbitmq  # Usa il nome del servizio come host


volumes:
  shared_data:  # Volume Docker condiviso tra executor e monitor
